// Please note this is a C program// It compiles without warnings with gcc#include <iostream>#include <unistd.h>#include <stdio.h>#include <string.h>#include <stdlib.h>#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <netdb.h>#include <sys/wait.h>#include <cmath>using namespace std;struct info{    int processing;    int walsh[4];    int EM[12];};void error(string msg){    cout << msg;    exit(0);}int main(int argc, char *argv[]){    pid_t pid;        int get[16] = {0};    int DM[12] = {0};    int w[4] = {0};        info storing[3];        int bi1[3] = {0}, bi2[3] = {0}, bi3[3] = {0};        int sockfd, portno, n, x;    struct sockaddr_in serv_addr;    struct hostent *server;    char buffer[256];    if (argc < 3)    {        fprintf(stderr, "usage %s hostname port\n", argv[0]);        exit(0);    }    portno = atoi(argv[2]);        int process1[2] = {0};    int process2[2] = {0};    int process3[2] = {0};        int proc, val;    int i = 1;        while (cin >> proc >> val)    {        if (i == 1)        {            process1[0] = proc;            process1[1] = val;        }        else if (i == 2)        {            process2[0] = proc;            process2[1] = val;        }        else if (i == 3)        {            process3[0] = proc;            process3[1] = val;        }        i++;    }        int socketArray[3] = {0};    for (x = 0; x < 3; x++)    {        if ((pid = fork() == 0))        {            sockfd = socket(AF_INET, SOCK_STREAM, 0);            if (sockfd < 0)                error("ERROR opening socket");            server = gethostbyname(argv[1]);            if (server == NULL)            {                fprintf(stderr, "ERROR, no such host\n");                exit(0);            }            bzero((char *)&serv_addr, sizeof(serv_addr));            serv_addr.sin_family = AF_INET;            bcopy((char *)server->h_addr,                  (char *)&serv_addr.sin_addr.s_addr,                  server->h_length);            serv_addr.sin_port = htons(portno);            if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)                error("ERROR connecting");                        if (x == 0)            {                //sending child 1                cout << "Child 1, sending value: " << process1[1] << " to child process " << process1[0]                << endl;                n = write(sockfd, (char *)&process1, sizeof(process1));                if (n < 0)                    error("ERROR reading from socket");            }            else if (x == 1)            {                //sending child 2                socketArray[x] = sockfd;                cout << "Child 2, sending value: " << process2[1] << " to child process " << process2[0]                << endl;                n = write(sockfd, (char *)&process2, sizeof(process2));                if (n < 0)                    error("ERROR reading from socket");            }            else            {                //sending child 3                socketArray[x] = sockfd;                cout << "Child 3, sending value: " << process3[1] << " to child process " << process3[0]                << endl;                n = write(sockfd, (char *)&process3, sizeof(process3));                if (n < 0)                    error("ERROR reading from socket");            }            bzero((int *)&get, sizeof(get));                        n = read(sockfd, (int *)&get, sizeof(get));                        if (n < 0)                error("ERROR reading from socket");            cout << endl;                        int a = 0, b = 4;            int Walsh[12] = {0};                        for (int a = 0; a < 4; a++)            {                w[a] = get[a];            }                        for (a = 0; a < 12 && b < 16; a++, b++)            {                Walsh[a] = get[b];            }                        cout << "Child " << x + 1 << endl;            cout << "Signal: ";                        for (int i = 0; i < 12; i++)            {                cout << Walsh[i] << " ";            }            cout << endl;            cout << "Code: ";            for (int i = 0; i < 4; i++)            {                cout << w[i] << " ";            }            cout << endl;                        int idx = 0;            for (int b = 0; b < 12; b++)            {                Walsh[b] = Walsh[b] * w[idx];                idx++;                if (idx > 3)                    idx = 0;            }                        int totalsum = 0;            int storingArray[3];            for (int a = 0; a < 12; a += 4)            {                int sum = 0;                for (int b = 0, c = a; b < 4; b++)                {                    sum += Walsh[c + b];                }                storingArray[totalsum] = sum;                totalsum++;            }            for (int d = 0; d < 3; d++)            {                int value = (storingArray[d]) / 4;                                if (value == -1)                {                    storingArray[d] = 0;                }                else                {                    storingArray[d] = 1;                }            }                        int dec = 0;            int baseNum = 1;            for (int d = 2; d >= 0; d--)            {                if (storingArray[d] == 1)                {                    dec += baseNum;                }                baseNum *= 2;            }            cout << "Received value = " << dec << endl;                        close(sockfd);            _exit(0);        }    }        for (x = 0; x < 3; x++)    {        wait(0);    }        return 0;}